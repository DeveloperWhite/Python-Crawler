# 函数的嵌套
def fun1():
    print("fun1")

# 这叫函数的调用，不是函数的嵌套
def fun2():
    print("fun2")
    fun1()
    print("fun2")
fun2()

# 函数的嵌套
'''
def fun3():
    print("fun3")
    def fun4():
        print("fun4")
    print("我是外面")
'''
# 这里有个注意点
# 执行fun3()只会输出fun3和我是外面，生成fun4函数，fun4里面不会执行
# fun3()
# 如何调用fun4函数呢？
# 只能在fun3函数里面调用fun4函数,看清楚函数层级
def fun3():
    print("fun3")
    def fun4():
        print("fun4")
    fun4()
    print("我是外面")
fun3()

# python程序在加载的时候，会给解释器内部需要的内置一些变量加载，加载的位置叫内置名称空间
# 接下来执行自己的py文件，自己创建的这些变量统一放到全局名称空间
# （都在全局中）当程序执行到函数的时候，函数内部自己的变量，python会为每一个正在执行的函数单独创建空间，称为局部名称空间
# 当执行完就会被回收
# 作用域：变量生效的区域
# 全局名称空间：全局变量
# 局部名称空间：局部变量，函数正在执行的时候创建的，执行完就会被回收
# 内置名称空间：python自己的内容
# globals()是一个内置函数，可以查看全局作用域里面的内容
print(globals())
# locals()是一个内置函数，可以查看局部作用域里面的内容
print(locals())

